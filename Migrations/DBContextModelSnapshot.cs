// <auto-generated />
using System;
using MTGApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MTGApp.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MTGApp.Models.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("artists_pkey");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ArtistId")
                        .HasColumnType("bigint")
                        .HasColumnName("artist_id");

                    b.Property<string>("ConvertedManaCost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("converted_mana_cost");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Flavor")
                        .HasColumnType("text")
                        .HasColumnName("flavor");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("layout");

                    b.Property<bool?>("Liked")
                        .HasColumnType("boolean");

                    b.Property<string>("ManaCost")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mana_cost");

                    b.Property<string>("MtgId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mtg_id");

                    b.Property<int?>("MultiverseId")
                        .HasColumnType("integer")
                        .HasColumnName("multiverse_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("number");

                    b.Property<string>("OriginalImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_image_url");

                    b.Property<string>("OriginalText")
                        .HasColumnType("text")
                        .HasColumnName("original_text");

                    b.Property<string>("OriginalType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_type");

                    b.Property<string>("Power")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("power");

                    b.Property<string>("RarityCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rarity_code");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("set_code");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Toughness")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("toughness");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Variations")
                        .HasColumnType("json")
                        .HasColumnName("variations");

                    b.HasKey("Id")
                        .HasName("cards_pkey");

                    b.HasIndex("ArtistId");

                    b.HasIndex("RarityCode");

                    b.HasIndex("SetCode");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.CardColor", b =>
                {
                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("color_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CardId", "ColorId")
                        .HasName("card_colors_pkey");

                    b.HasIndex("ColorId");

                    b.ToTable("card_colors", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.CardType", b =>
                {
                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CardId", "TypeId")
                        .HasName("card_types_pkey");

                    b.HasIndex("TypeId");

                    b.ToTable("card_types", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("colors_pkey");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Format", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("formats_pkey");

                    b.ToTable("formats", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Batch")
                        .HasColumnType("integer")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id")
                        .HasName("migrations_pkey");

                    b.ToTable("migrations", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.PersonalAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abilities")
                        .HasColumnType("text")
                        .HasColumnName("abilities");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("token");

                    b.Property<long>("TokenableId")
                        .HasColumnType("bigint")
                        .HasColumnName("tokenable_id");

                    b.Property<string>("TokenableType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tokenable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("personal_access_tokens_pkey");

                    b.HasIndex(new[] { "Token" }, "personal_access_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "TokenableType", "TokenableId" }, "personal_access_tokens_tokenable_type_tokenable_id_index");

                    b.ToTable("personal_access_tokens", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Rarity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("rarities_pkey");

                    b.HasIndex(new[] { "Code" }, "rarities_code_unique")
                        .IsUnique();

                    b.ToTable("rarities", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sets_pkey");

                    b.HasIndex(new[] { "Code" }, "sets_code_unique")
                        .IsUnique();

                    b.ToTable("sets", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Type", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Type1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("types_pkey");

                    b.ToTable("types", (string)null);
                });

            modelBuilder.Entity("MTGApp.Models.Card", b =>
                {
                    b.HasOne("MTGApp.Models.Artist", "Artist")
                        .WithMany("Cards")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("cards_artist_id_foreign");

                    b.HasOne("MTGApp.Models.Rarity", "RarityCodeNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("RarityCode")
                        .HasPrincipalKey("Code")
                        .HasConstraintName("cards_rarity_code_foreign");

                    b.HasOne("MTGApp.Models.Set", "SetCodeNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("SetCode")
                        .HasPrincipalKey("Code")
                        .IsRequired()
                        .HasConstraintName("cards_set_code_foreign");

                    b.Navigation("Artist");

                    b.Navigation("RarityCodeNavigation");

                    b.Navigation("SetCodeNavigation");
                });

            modelBuilder.Entity("MTGApp.Models.CardColor", b =>
                {
                    b.HasOne("MTGApp.Models.Card", "Card")
                        .WithMany("CardColors")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("card_colors_card_id_foreign");

                    b.HasOne("MTGApp.Models.Color", "Color")
                        .WithMany("CardColors")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("card_colors_color_id_foreign");

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("MTGApp.Models.CardType", b =>
                {
                    b.HasOne("MTGApp.Models.Card", "Card")
                        .WithMany("CardTypes")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("card_types_card_id_foreign");

                    b.HasOne("MTGApp.Models.Type", "Type")
                        .WithMany("CardTypes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("card_types_type_id_foreign");

                    b.Navigation("Card");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MTGApp.Models.Artist", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MTGApp.Models.Card", b =>
                {
                    b.Navigation("CardColors");

                    b.Navigation("CardTypes");
                });

            modelBuilder.Entity("MTGApp.Models.Color", b =>
                {
                    b.Navigation("CardColors");
                });

            modelBuilder.Entity("MTGApp.Models.Rarity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MTGApp.Models.Set", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MTGApp.Models.Type", b =>
                {
                    b.Navigation("CardTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
